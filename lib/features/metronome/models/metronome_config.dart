// lib/features/metronome/models/metronome_config.dart
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:uuid/uuid.dart';

import '../../../constants/metronome_settings.dart';
import 'cell_config.dart';

// Required: associates this file with the code generated by Freezed
part 'metronome_config.freezed.dart';
// Optional: For JSON serialization
part 'metronome_config.g.dart';

@freezed
abstract class MetronomeConfig with _$MetronomeConfig {
  const factory MetronomeConfig({
    String? id,
    String? title,
    @Default(120.0) double initialBpm,
    required List<CellConfig> cellSequence,
    @Default(MetronomeVolume.strongBeatVolume) double strongBeatVolume,
    @Default(MetronomeVolume.weakBeatVolume) double weakBeatVolume,
    @Default(false) bool useCountdownTimer,
    @Default(300) int countdownDurationSeconds,
    @Default(true) bool markDownbeat,
  }) = _MetronomeConfig;

  factory MetronomeConfig.fromJson(Map<String, Object?> json) =>
      _$MetronomeConfigFromJson(json);

  // Custom constructor to match the original MetronomeConfig behavior
  factory MetronomeConfig.create({
    String? id,
    String? title,
    double initialBpm = 120.0,
    List<CellConfig>? cellSequence,
    double strongBeatVolume = MetronomeVolume.strongBeatVolume,
    double weakBeatVolume = MetronomeVolume.weakBeatVolume,
    bool useCountdownTimer = false,
    int countdownDurationSeconds = 300,
    bool markDownbeat = true,
  }) => MetronomeConfig(
    id: id ?? const Uuid().v4(),
    title: title,
    initialBpm: initialBpm,
    cellSequence: cellSequence ?? [const CellConfig(pulses: 4)],
    strongBeatVolume: strongBeatVolume,
    weakBeatVolume: weakBeatVolume,
    useCountdownTimer: useCountdownTimer,
    countdownDurationSeconds: countdownDurationSeconds,
    markDownbeat: markDownbeat,
  );
}
